name: Deploy to Netlify

on:
  push:
    branches:
      - master
  pull_request:
    types: [opened, reopened, synchronize]

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Setup TypeScript
        uses: actions/setup-node@v3
        with:
          node-version: "18"

      - name: Install dependencies
        run: npm install

      - name: Build TypeScript
        run: |
          echo "Building TypeScript files..."
          npx tsc
          echo "TypeScript build complete. Checking output files:"
          ls -la dist/

          if [ -f "dist/app.js" ]; then
            echo "‚úÖ app.js was built successfully"
          else
            echo "‚ùå app.js was not built! Checking TypeScript config..."
            cat tsconfig.json || echo "tsconfig.json not found!"
          fi

      - name: Generate manifest
        run: |
          echo "Generating manifest from guides directory..."
          node --loader ts-node/esm scripts/generate-manifest.ts
          echo "Generated manifest content:"
          cat guides/manifest.json

          # Verify Optiver_Guide.md is in the guides directory
          echo "Checking for Optiver_Guide.md in guides directory:"
          ls -la guides/Optiver_Guide.md || echo "Optiver_Guide.md not found!"

      - name: Prepare deployment files
        run: |
          # Create a clean directory for deployment
          mkdir -p build

          # Copy all necessary files
          cp src/index.html build/index.html
          cp src/styles.css build/styles.css

          # Copy TypeScript build output
          if [ -f "dist/app.js" ]; then
            cp dist/app.js build/app.js
          fi

          # Ensure guides directory exists and copy all markdown files
          mkdir -p build/guides
          echo "Copying all .md files to build/guides:"
          cp -v guides/*.md build/guides/
          cp -v guides/manifest.json build/guides/

          # Verify the files in build/guides
          echo "Files in build/guides:"
          ls -la build/guides/

          # Verify Optiver_Guide.md was copied
          if [ -f "build/guides/Optiver_Guide.md" ]; then
            echo "‚úÖ Optiver_Guide.md was copied successfully"
          else
            echo "‚ùå Optiver_Guide.md was not copied!"
            # Try to copy it explicitly
            cp -v guides/Optiver_Guide.md build/guides/ || echo "Could not copy Optiver_Guide.md!"
          fi

          # Copy utils directory if it exists
          if [ -d "dist/utils" ]; then
            mkdir -p build/utils
            cp -r dist/utils/* build/utils/
          fi

          # Create .nojekyll file to disable Jekyll processing
          touch build/.nojekyll

          # Create a netlify.toml file for configuration
          cat << EOF > build/netlify.toml
          # Redirect all requests to index.html for SPA routing
          [[redirects]]
            from = "/*"
            to = "/index.html"
            status = 200
            force = false
            
          # Rewrite API requests to the correct path
          [[redirects]]
            from = "/guides/*"
            to = "/guides/:splat"
            status = 200
          EOF

          # Display deployment info
          if [ "${{ github.event_name }}" == "push" ]; then
            echo "üöÄ Preparing PRODUCTION deployment to Netlify from master branch"
          else
            echo "üîç Preparing PREVIEW deployment to Netlify for PR #${{ github.event.number }}"
          fi

          # Show deployment structure
          echo "Deployment directory structure:"
          find build -type f | sort

      # Display deployment info
      - name: Check Netlify credentials
        run: |
          if [ -n "${{ secrets.NETLIFY_AUTH_TOKEN }}" ]; then
            echo "‚úÖ NETLIFY_AUTH_TOKEN is set"
            echo "Token starts with: ${NETLIFY_AUTH_TOKEN:0:4}..."
          else
            echo "‚ùå NETLIFY_AUTH_TOKEN is not set"
          fi

          if [ -n "${{ secrets.NETLIFY_SITE_ID }}" ]; then
            echo "‚úÖ NETLIFY_SITE_ID is set"
            echo "Site ID starts with: ${NETLIFY_SITE_ID:0:4}..."
          else
            echo "‚ùå NETLIFY_SITE_ID is not set"
          fi
        env:
          NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
          NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}

      # Deploy to Netlify
      - name: Install Netlify CLI
        run: npm install -g netlify-cli

      - name: Deploy to Netlify
        id: netlify-deploy
        run: |
          if [ "${{ github.event_name }}" == "push" ]; then
            echo "Deploying to production..."
            netlify deploy --dir=./build --prod
          else
            echo "Deploying preview for PR #${{ github.event.number }}..."
            netlify deploy --dir=./build --alias="pr-${{ github.event.number }}"
          fi
        env:
          NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
          NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}

      # Output deployment URLs
      - name: Display deployment URLs
        if: success()
        run: |
          echo "üöÄ Deployment successful!"
          echo "Your site should be available at:"
          echo "https://$(cat .netlify/output)" || echo "https://$(cat .netlify/state.json | jq -r .siteId).netlify.app"
